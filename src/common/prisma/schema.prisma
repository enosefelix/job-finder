// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASEURL")
}

enum UserStatus {
  Active
  Inactive
  Suspended
}

enum ExperienceLevel {
  Junior
  MidLevel
  Senior
  EntryLevel
  Internship
  Associate
  Principal
}

enum JobType {
  FullTime
  PartTime
  Contract
  Freelance
  Internship
  Temporary
}

enum Roles {
  Admin
  User
}

enum ApprovalStatus {
  Pending
  Approved
  Rejected
}

enum BillingCycle {
  Monthly
  Quarterly
  Yearly
}

enum SkillLevel {
  Beginner
  Intermediate
  Advanced
  Expert
}

enum LanguageProficiency {
  Basic
  Conversational
  Proficient
  Fluent
  Native
}

enum Category {
  Hybrid
  Onsite
  Remote
}

model Role {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique() @db.VarChar
  description String?  @db.VarChar
  code        Roles    @unique() @default(User)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  createdBy   String?  @db.Uuid
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy   String?  @db.Uuid
  users       User[]

  @@map("role")
}

model Comment {
  id           String     @id @default(uuid()) @db.Uuid
  comment      String     @db.VarChar
  userId       String     @db.Uuid
  jobListingId String     @db.Uuid
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime   @default(now()) @updatedAt @db.Timestamptz(6)
  user         User       @relation(fields: [userId], references: [id])
  jobListing   JobListing @relation(fields: [jobListingId], references: [id])
}

model User {
  id                     String                   @id @default(uuid()) @db.Uuid
  email                  String                   @unique @db.VarChar(50)
  password               String                   @db.VarChar
  googleId               String?                  @db.VarChar
  roleId                 String?                  @db.Uuid
  lastLogin              DateTime?                @db.Timestamptz(6)
  lastLoginIp            String?                  @db.VarChar
  status                 UserStatus?              @default(Active)
  profileId              String?                  @db.Uuid
  isSubscribed           Boolean                  @default(false)
  token                  String?                  @db.VarChar
  tokenExpiresIn         DateTime?                @db.Timestamptz(6)
  subscriptionId         String?                  @unique @db.Uuid
  stripeCustomerId       String?                  @db.VarChar
  createdAt              DateTime                 @default(now()) @db.Timestamptz(6)
  createdBy              String?                  @db.Uuid
  updatedAt              DateTime                 @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy              String?                  @db.Uuid
  Tags                   Tags[]                   @relation("TaggedUser")
  TaggedBy               Tags[]                   @relation("TaggedByUser")
  bookmarks              Bookmark[]
  jobListing             JobListing[]
  jobListingApplications JobListingApplications[]
  role                   Role?                    @relation(fields: [roleId], references: [id])
  profile                Profile?
  subscription           Subscription?
  comment                Comment[]

  @@map("user")
}

model Subscription {
  id               String       @id @default(uuid()) @db.Uuid
  name             String       @unique @db.VarChar
  userId           String?      @unique @db.Uuid
  description      String       @db.VarChar
  subscriptionType BillingCycle
  price            Float        @db.DoublePrecision()
  isActive         Boolean      @default(false)
  createdAt        DateTime     @default(now()) @db.Timestamptz(6)
  createdBy        String?      @db.Uuid
  updatedAt        DateTime     @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy        String?      @db.Uuid
  user             User?        @relation(fields: [userId], references: [id])

  @@map("subscription")
}

model Profile {
  id                    String               @id @default(uuid()) @db.Uuid
  firstName             String               @db.VarChar
  lastName              String               @db.VarChar
  email                 String?              @unique @db.VarChar
  phone                 String?              @db.VarChar
  profilePicUrl         String?              @db.VarChar
  userId                String               @unique @db.Uuid
  profileSummary        String?              @db.VarChar
  githubLink            String?              @db.VarChar
  linkedinLink          String?              @db.VarChar
  twitterLink           String?              @db.VarChar
  facebookLink          String?              @db.VarChar
  personalPortfolioLink String?              @db.VarChar
  createdAt             DateTime             @default(now()) @db.Timestamptz(6)
  createdBy             String?              @db.Uuid
  updatedAt             DateTime             @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy             String?              @db.Uuid
  User                  User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  skills                Skill[]
  languages             Languages[]
  workExperiences       WorkExperience[]
  educationalHistory    EducationalHistory[]
  Certifications        Certification[]
  Resumes               Resume[]

  @@map("profile")
}

model Bookmark {
  id           String     @id @default(uuid()) @db.Uuid
  userId       String     @db.Uuid
  jobListingId String     @db.Uuid
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  createdBy    String?    @db.Uuid
  updatedAt    DateTime   @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy    String?    @db.Uuid
  user         User       @relation(fields: [userId], references: [id])
  jobListing   JobListing @relation(fields: [jobListingId], references: [id])

  @@map("bookmark")
}

model JobListing {
  id                  String                   @id @default(uuid()) @db.Uuid
  title               String                   @db.VarChar
  companyName         String                   @db.VarChar
  jobResponsibilities String[]                 @db.VarChar
  approvedById        String?                  @db.Uuid
  jobRequirements     String                   @db.VarChar
  category            Category
  salary              String                   @db.VarChar
  experienceLevel     ExperienceLevel
  location            String                   @db.VarChar
  industry            String                   @db.VarChar
  companyDetails      String                   @db.VarChar
  jobType             JobType
  status              ApprovalStatus           @default(Pending)
  isClosed            Boolean                  @default(false)
  createdAt           DateTime                 @default(now()) @db.Timestamptz(6)
  createdBy           String?                  @db.Uuid
  updatedAt           DateTime                 @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy           String?                  @db.Uuid
  taggedUsers         Tags[]
  skills              String[]
  bookmarks           Bookmark[]
  languages           String[]
  jobApplications     JobListingApplications[]
  approvedBy          User?                    @relation(fields: [approvedById], references: [id])
  comments            Comment[]

  @@map("job_listing")
}

model Location {
  id        String   @id @default(uuid()) @db.Uuid
  countryId String   @db.Uuid
  stateId   String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  createdBy String?  @db.Uuid
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy String?  @db.Uuid

  @@map("location")
}

model JobListingApplications {
  id           String     @id @default(uuid()) @db.Uuid
  resume       String     @db.VarChar
  coverLetter  String     @db.VarChar
  availability String     @db.VarChar
  userId       String     @db.Uuid
  jobListingId String     @db.Uuid
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  createdBy    String?    @db.Uuid
  updatedAt    DateTime   @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy    String?    @db.Uuid
  user         User       @relation(fields: [userId], references: [id])
  jobListing   JobListing @relation(fields: [jobListingId], references: [id])

  @@map("job_listing_applications")
}

model WorkExperience {
  id             String   @id @default(uuid()) @db.Uuid
  position       String   @db.VarChar
  organization   String   @db.VarChar
  state          String   @db.VarChar
  country        String   @db.VarChar
  startDate      String   @db.VarChar
  endDate        String   @db.VarChar
  jobDescription String[] @db.VarChar
  jobType        JobType
  profileId      String?  @db.Uuid
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  createdBy      String?  @db.Uuid
  updatedAt      DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy      String?  @db.Uuid
  profile        Profile? @relation(fields: [profileId], references: [id])

  @@map("work_experience")
}

model Certification {
  id           String   @id @default(uuid()) @db.Uuid
  name         String?  @db.VarChar
  organization String   @db.VarChar
  yearIssued   String   @db.VarChar
  expiryYear   String   @db.VarChar
  profileId    String?  @db.Uuid
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  createdBy    String?  @db.Uuid
  updatedAt    DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy    String?  @db.Uuid
  profile      Profile? @relation(fields: [profileId], references: [id])

  @@map("certifications")
}

model Resume {
  id          String   @id @default(uuid()) @db.Uuid
  resume      String   @db.VarChar
  coverLetter String   @db.VarChar
  profileId   String?  @db.Uuid
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  createdBy   String?  @db.Uuid
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy   String?  @db.Uuid
  profile     Profile? @relation(fields: [profileId], references: [id])

  @@map("resume")
}

model EducationalHistory {
  id           String   @id @default(uuid()) @db.Uuid
  institution  String   @db.VarChar
  location     String   @db.VarChar
  fieldOfStudy String?  @db.VarChar
  startDate    String   @db.VarChar
  endDate      String   @db.VarChar
  profileId    String?  @db.Uuid
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  createdBy    String?  @db.Uuid
  updatedAt    DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy    String?  @db.Uuid
  profile      Profile? @relation(fields: [profileId], references: [id])

  @@map("educational_history")
}

model Skill {
  id                String     @id @default(uuid()) @db.Uuid
  profileId         String?    @db.Uuid
  jobListingId      String?    @db.Uuid
  skillName         String     @db.VarChar
  skillLevel        SkillLevel
  yearsOfExperience Int        @db.Integer
  createdAt         DateTime   @default(now()) @db.Timestamptz(6)
  createdBy         String?    @db.Uuid
  updatedAt         DateTime   @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy         String?    @db.Uuid
  profile           Profile?   @relation(fields: [profileId], references: [id])

  @@map("skill")
}

model Languages {
  id           String              @id @default(uuid()) @db.Uuid
  profileId    String?             @db.Uuid
  jobListingId String?             @db.Uuid
  languageName String              @db.VarChar
  proficiency  LanguageProficiency
  createdAt    DateTime            @default(now()) @db.Timestamptz(6)
  createdBy    String?             @db.Uuid
  updatedAt    DateTime            @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy    String?             @db.Uuid
  profile      Profile?            @relation(fields: [profileId], references: [id])

  @@map("languages")
}

model Tags {
  id             String     @id @default(uuid()) @db.Uuid
  taggedByUserId String     @db.Uuid
  taggedUserId   String     @db.Uuid
  jobListingId   String     @db.Uuid
  jobListing     JobListing @relation(fields: [jobListingId], references: [id])
  taggedBy       User       @relation("TaggedByUser", fields: [taggedByUserId], references: [id])
  taggedUser     User       @relation("TaggedUser", fields: [taggedUserId], references: [id])
  createdAt      DateTime   @default(now()) @db.Timestamptz(6)
  createdBy      String?    @db.Uuid
  updatedAt      DateTime   @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy      String?    @db.Uuid

  @@map("tags")
}
